-----------------------------App.js < FRONTEND > -----------------------------

import { useState, useEffect } from 'react'
import noteService from './notes.js'
import axios from 'axios'
import Notification from './Notifications.js'

const App = () => {
	
	const [ persons, setPersons ] = useState([])
	const [ newName, setNewName ] = useState("")
	const [ newNumber, setNewNumber ] = useState("")
	const [ search, setSearch ] = useState("")
	const [ showAll, setShowAll ] = useState(false)
	const [ errorMessage, setErrorMessage ] = useState("")
	const [ successMessage, setSuccessMessage ] = useState("")
	
	
	useEffect(() => {
		noteService
			.getAll()
			.then(response => setPersons(response))
	} , [])
	
	const addPersons = (event) => {
		event.preventDefault()
		const newPersonObject = {
			name: newName,
			number: newNumber
		}
		noteService
			.create(newPersonObject)
			.then((response) => {
			setPersons(persons.concat(response))
			setSuccessMessage(`Added ${newName}`)
			setTimeout(() => {
				setSuccessMessage(null)
			  }, 3000)
		setNewName("")
		setNewNumber("")
	})
	.catch((err) => {
        setErrorMessage("Error adding person")
        setTimeout(() => {
          setErrorMessage(null)
        }, 5000)
      })
}
	
	const handleNameChange = (event) => {setNewName(event.target.value)}
	
	const handleNumberChange = (event) => {setNewNumber(event.target.value)}
	
	const handleSearch = (event) => {
		setSearch(event.target.value)
		setShowAll(true)
	}

	/*const handleClick = event => {
		setShowAdded(current => !current);
	  };*/

	const Filter = (query) => {
		const filter_result = persons.filter(person => person.name.toLowerCase().split(" ").join("").indexOf(query.toLowerCase()) !== -1)
		
		return filter_result
	}
	
	const displayToShow = showAll
	? Filter(search)
	: persons
	
	const handleDelete = (id) => {
		
		noteService
			.getOne(id)
			.then(response => {
				const result = window.confirm("Do you really want to delete " + response.name)
		
					if (result) {
						noteService
							.deleteObject(id)
							.then(response => console.log(response))
							setSuccessMessage(`${response.name} removed from phonebook`)
					} 
					
				setTimeout(() => {
					noteService
						.getAll()
						.then(response => setPersons(response))
				}, 1000)
			})
	}

	const handleChange = (name) => {
		const person = persons.find(n => n.name === name) 
		const change = {...person, number:newNumber}
		const id = person.id 
		
		const result = window.confirm(name + " is already in the Phonebook, replace the old number with a new number?")
		
		if (result) {
			noteService
				.update(id, change)
				.then(response => setPersons(persons.map(person => person.id === id ? response : person)))
		}
	}
	
	
	
	return (
		<div>
			
			<h2>Phonebook</h2>
			<Notification successMessage={successMessage} errorMessage={errorMessage}/>
			<br />
			Search by Name: <input value = {search} onChange = {handleSearch} />
		
			<h2>Add A New Contact</h2>
			<form onSubmit = {addPersons}>
			
				Name: <input value = {newName} onChange = {handleNameChange} />
				<br />
				Number: <input value = {newNumber} onChange = {handleNumberChange} />
				<br />
				<button type = "submit">Add</button>
			</form>
			
			
			<br />
			<form onSubmit = {() => handleChange(newName)}>
				<button type = "submit">Change Contact</button>
			</form>
			
			
			<h2>Numbers</h2>
			{displayToShow.map(person => {
				return(
					<div key = {person.id}>
						<p>{person.name}: {person.number} <button onClick = {() => handleDelete(person.id)}>Delete</button></p>
						
					</div>
				)})
			}
			
		</div>
	)
}

export default App


-----------------------------notes.js < FRONTEND > -----------------------------

import axios from 'axios'
import react from 'react'

const baseUrl = '/persons'


const getAll = () => {
	const request = axios.get(baseUrl)
	return request.then(response => response.data)
}

const getOne = (id) => {
	const request = axios.get(`${baseUrl}/${id}`)
	return request.then(response => response.data)
}

const create = (newObject) => {
	const request = axios.post(baseUrl, newObject)
	return request.then(response => response.data)
}

const update = (id, newObject) => {
	const request = axios.put(`${baseUrl}/${id}`, newObject)
	return request.then(response => response.data)
}

const deleteObject = (id) => {
	const request = axios.delete(`${baseUrl}/${id}`)
	return request.then(response => response.data)
}



export default {getAll, getOne, create, update, deleteObject}

-----------------------------person.js < BACKEND > -----------------------------

const mongoose = require('mongoose')
const validator = require("mongoose-unique-validator")


const url = process.env.MONGODB_URI

console.log('connecting to', url)


mongoose.connect(url)
  .then(result => {
		console.log('connected to MongoDB')
  })
  .catch((error) => {
		console.log('error connecting to MongoDB:', error.message)
  })


const personSchema = new mongoose.Schema({
  name: {
	  type: String,
	  minlength: 5,
	  unique: true,
	  required: true
  },
  number: {
	  type: String,
	  minlength: 8,
	  required: true
  }
})

personSchema.plugin(validator)

personSchema.set('toJSON', {
  transform: (document, person) => {
    person.id = person._id.toString()
    delete person._id
    delete person.__v
  }
})


module.exports = mongoose.model('Person', personSchema)

-----------------------------mongo.js < BACKEND > -----------------------------

const mongoose = require('mongoose')

if ( process.argv.length<5 ) {
  console.log('give password as argument')
  process.exit(1)
}

const password = process.argv[2]
const firstName = process.argv[3]
const lastName = process.argv[4]
const tele = process.argv[5]

const url = 
    `mongodb+srv://kismet1985:${password}@cluster0.8lmsf.mongodb.net/desktop?retryWrites=true&w=majority`
  

mongoose.connect(url)

const personSchema = new mongoose.Schema({
  name: String,
  telephone: String
})

const Person = mongoose.model('Person', personSchema)

const person = new Person({
  name: `${firstName} ${lastName}`,
  telephone: String(tele)
})

person.save().then(response => {
  console.log(`added ${firstName} number ${tele} to phonebook`)
  mongoose.connection.close()
})


Person
	.find({})
	.then(response => {
		console.log("Phonebook")
		response.forEach(person => {
			console.log(person.name, person.telephone)
		})
	mongoose.connection.close()
})

-----------------------------index.js < BACKEND > -----------------------------

require('dotenv').config()
const express = require("express")
const app = express()
const bodyParser = require('body-parser')
const morgan = require("morgan")
const cors = require('cors')

const Person = require("./models/person")

morgan.token('person', (req) => {
	if (req.method === 'POST') return JSON.stringify(req.body)
	return null
  })


app.use(morgan(':method :url :status :res[content-length] - :response-time ms :person'))

app.use(cors())

app.use(bodyParser.json())

app.use(express.static('build'))

app.get("/", (req, res) => {
	res.send(`<h1>Hello World </h1>`)
})

app.get("/info", (req, res) => {
	const date = new Date()
	
	res.send(`<h1>Phonebook has info for ${persons.length} people</h1> <h2>${date}</h2>`)
})

app.get("/persons", (req, res, next) => {
	Person
		.find({})
		.then(people => {
			res.json(people.map(person => person.toJSON()))
	})
		.catch(error => next(error))
})


app.get("/persons/:id" , (req, res) => {
	const id = req.params.id
	
	Person
		.find({})
		.then(people => {
		const person = people.find(person => person.id === id)
			if (person) {
				res.json(person.toJSON())
			} else {
				res.status(404).end()
			}
	})
		.catch(error => {
			console.log(error)
			res.status(400).send({error: "malformatted id"})
		})
})

app.delete("/persons/:id", (req, res, next) => {
	const id = req.params.id
	
	Person
		.findByIdAndRemove(id)
		.then(result => {
			res.status(204).end()
    })
		.catch(error => next(error))
}) 

/*const generateID = () => {
	const Gid = Math.floor(Math.random() * 1000)
	
	return Gid
}*/
	
app.post("/persons" , (req, res, next) => {
	const body = req.body

	if (!body.name || !body.number) {
		return res.status(400).json({error: "information missing"})
	}
	
	const person = new Person({
		name: body.name,
		number: body.number
	}) 
	
	person
		.save()
		.then(Savedperson => {
			res.json(Savedperson.toJSON)
	})
		.catch(error => next(error))
})

app.put('/persons/:id', (req, res, next) => {
	const body = req.body
	const id = req.params.id
  
	const person = {
	  name: body.name,
	  number: body.number
	}
  
	Person
		  .findByIdAndUpdate(id, person, { new: true })
		  .then(updatedNote => {
			  res.json(updatedNote.toJSON())
		  })
		  .catch(error => next(error))
  })
  
  const errorHandler = (error, req, res, next) => {
	  console.log(error)
	  res.status(404).end()
  }
  
  app.use(errorHandler)


const PORT = process.env.PORT || 3001
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`)
})

