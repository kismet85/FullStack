import { useState, useEffect } from 'react'
import noteService from './notes.js'
import axios from 'axios'
import Notification from './Notifications.js'

const App = () => {
	
	const [ persons, setPersons ] = useState([])
	const [ newName, setNewName ] = useState("")
	const [ newNumber, setNewNumber ] = useState("")
	const [ search, setSearch ] = useState("")
	const [ showAll, setShowAll ] = useState(false)
	const [errorMessage, setErrorMessage] = useState("")
	const [successMessage, setSuccessMessage] = useState("")
	
	
	useEffect(() => {
		noteService
			.getAll()
			.then(response => setPersons(response))
	} , [])
	
	const addPersons = (event) => {
		event.preventDefault()
		const newPersonObject = {
			name: newName,
			number: newNumber
		}
		noteService
			.create(newPersonObject)
			.then((response) => {
			setPersons(persons.concat(response))
			setSuccessMessage(`Added ${newName}`)
			setTimeout(() => {
				setSuccessMessage(null)
			  }, 3000)
		setNewName("")
		setNewNumber("")
	})
	.catch((err) => {
        setErrorMessage("Error adding person")
        setTimeout(() => {
          setErrorMessage(null)
        }, 5000)
      })
}
	
	const handleNameChange = (event) => {setNewName(event.target.value)}
	
	const handleNumberChange = (event) => {setNewNumber(event.target.value)}
	
	const handleSearch = (event) => {
		setSearch(event.target.value)
		setShowAll(true)
	}

	/*const handleClick = event => {
		setShowAdded(current => !current);
	  };*/

	const Filter = (query) => {
		const filter_result = persons.filter(person => person.name.toLowerCase().split(" ").join("").indexOf(query.toLowerCase()) !== -1)
		
		return filter_result
	}
	
	const displayToShow = showAll
	? Filter(search)
	: persons
	
	const handleDelete = (id) => {
		
		axios
			.get(`http://localhost:3001/persons/${id}`)
			.then(response => {
				const result = window.confirm("Are you sure you want to delete " + response.data.name)
		
					if (result) {
						axios
							.delete(`http://localhost:3001/persons/${id}`)
							.then(response => console.log(response.data))
							setSuccessMessage(`Succesfully deleted ${persons.find(person=> person.id === id).name}`)
							setTimeout(() => {
								setSuccessMessage(null)
							}, 3000);
					} 
					
				setTimeout(() => {
					noteService
						.getAll()
						.then(response => setPersons(response))
				}, 1000)
			})
	}

	const handleChange = (name) => {
		const person = persons.find(n => n.name === name) 
		const change = {...person, number:newNumber}
		const id = person.id 
		
		const result = window.confirm(name + " is already in the Phonebook, replace the old number with a new number?")
		
		if (result) {
			noteService
				.update(id, change)
				.then(response => setPersons(persons.map(person => person.id === id ? response : person)))
		}
	}
	
	
	
	return (
		<div>
			
			<h2>Phonebook</h2>
			<Notification successMessage={successMessage} errorMessage={errorMessage}/>
			<br />
			Search by Name: <input value = {search} onChange = {handleSearch} />
		
			<h2>Add A New Contact</h2>
			<form onSubmit = {addPersons}>
			
				Name: <input value = {newName} onChange = {handleNameChange} />
				<br />
				Number: <input value = {newNumber} onChange = {handleNumberChange} />
				<br />
				<button type = "submit">Add</button>
			</form>
			
			
			<br />
			<form onSubmit = {() => handleChange(newName)}>
				<button type = "submit">Change Contact</button>
			</form>
			
			
			<h2>Numbers</h2>
			{displayToShow.map(person => {
				return(
					<div key = {person.id}>
						<p>{person.name}: {person.number} <button onClick = {() => handleDelete(person.id)}>Delete</button></p>
						
					</div>
				)})
			}
			
		</div>
	)
}

export default App

--------------------------------------------------------Notification.js-------------------------------------------------------------

import React from "react";

const Notification = ({ successMessage, errorMessage }) => {
    const style = {
		color: "green",
		fontSize: 30,
		border: "2px solid green",
		borderRadius: "10px",
		margin: "20px",
		paddingLeft: "20px"
	}

  if (!successMessage && !errorMessage) {
    return null;
  }

  return (
    <div style={style} className={`message ${successMessage ? "success" : "error"}`}>
      {successMessage ? successMessage : errorMessage}
    </div>
  );
};

export default Notification;
